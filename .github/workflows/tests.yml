name: Tests

on:
  push:
    branches: [ main, beta, develop ]
  pull_request:
    branches: [ main, beta ]

jobs:
  test:
    name: Test Suite
    runs-on: macos-latest  # Use latest macOS for Swift 6.1 support

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Select Xcode version
      run: |
        # Try to use Xcode 16.x for Swift 6.1 support, fallback to latest available
        if [ -d "/Applications/Xcode_16.1.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
          echo "Using Xcode 16.1"
        elif [ -d "/Applications/Xcode_16.0.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
          echo "Using Xcode 16.0"
        elif [ -d "/Applications/Xcode_15.4.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          echo "Using Xcode 15.4"
        elif [ -d "/Applications/Xcode_15.3.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer
          echo "Using Xcode 15.3"
        else
          # Use the latest available
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          echo "Using latest available Xcode"
        fi

    - name: Install Swift 6.1 if needed
      run: |
        SWIFT_VERSION=$(swift --version | head -n1)
        echo "Current Swift version: $SWIFT_VERSION"

        if [[ "$SWIFT_VERSION" == *"6.1"* ]]; then
          echo "‚úÖ Swift 6.1 is already available"
        else
          echo "‚ö†Ô∏è  Swift 6.1 not found, attempting to install via swiftly..."
          # Install swiftly (Swift toolchain manager)
          curl -L https://swiftlang.github.io/swiftly/swiftly-install.sh | bash
          export PATH="$HOME/.swiftly/bin:$PATH"

          # Install Swift 6.1
          swiftly install 6.1-release
          swiftly use 6.1-release

          echo "Swift 6.1 installed via swiftly"
          swift --version
        fi

    - name: Show Swift version
      run: swift --version

    - name: Cache Swift packages
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-swift-

    - name: Build package
      run: swift build

    - name: Run CI tests (fast, no external dependencies)
      run: swift test --filter CITests
      timeout-minutes: 5

    - name: Run basic initialization tests
      run: swift test --filter BasicInitializationTests
      timeout-minutes: 10

    - name: Run CoreML backend tests
      run: swift test --filter CoreMLDiarizerTests
      timeout-minutes: 10

    - name: Run CoreML integration tests
      run: swift test --filter CoreMLBackendIntegrationTests
      timeout-minutes: 15
      continue-on-error: true  # May fail if models can't download in CI

    - name: Test package compilation (release mode)
      run: swift build --configuration release

    - name: Run all tests (summary)
      run: swift test --parallel
      timeout-minutes: 20
      continue-on-error: true  # Some tests may fail without models

  benchmark-check:
    name: Benchmark Compilation Check
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Select Xcode version
      run: |
        # Try to use Xcode 16.x for Swift 6.1 support, fallback to latest available
        if [ -d "/Applications/Xcode_16.1.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
        elif [ -d "/Applications/Xcode_16.0.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
        elif [ -d "/Applications/Xcode_15.4.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
        elif [ -d "/Applications/Xcode_15.3.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer
        else
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        fi

    - name: Install Swift 6.1 if needed
      run: |
        SWIFT_VERSION=$(swift --version | head -n1)
        echo "Current Swift version: $SWIFT_VERSION"

        if [[ "$SWIFT_VERSION" == *"6.1"* ]]; then
          echo "‚úÖ Swift 6.1 is already available"
        else
          echo "‚ö†Ô∏è  Swift 6.1 not found, attempting to install via swiftly..."
          curl -L https://swiftlang.github.io/swiftly/swiftly-install.sh | bash
          export PATH="$HOME/.swiftly/bin:$PATH"
          swiftly install 6.1-release
          swiftly use 6.1-release
          echo "Swift 6.1 installed via swiftly"
        fi

    - name: Build benchmarks
      run: swift build --target FluidAudioSwiftPackageTests

    - name: Check benchmark tests compile
      run: swift test --filter BenchmarkTests --dry-run
      continue-on-error: true  # Benchmarks need AMI data to actually run

    - name: Verify benchmark documentation
      run: |
        if [ -f "Tests/FluidAudioSwiftTests/README_BENCHMARKS.md" ]; then
          echo "‚úÖ Benchmark documentation found"
          echo "üìÑ Documentation size: $(wc -l < Tests/FluidAudioSwiftTests/README_BENCHMARKS.md) lines"
        else
          echo "‚ùå Benchmark documentation missing"
          exit 1
        fi

    - name: Check download script exists
      run: |
        if [ -f "Scripts/download_ami_benchmark_data.sh" ]; then
          echo "‚úÖ AMI download script found"
          chmod +x Scripts/download_ami_benchmark_data.sh
        else
          echo "‚ùå AMI download script missing"
          exit 1
        fi

  lint:
    name: Swift Lint Check
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Swift 6.1 if needed
      run: |
        SWIFT_VERSION=$(swift --version | head -n1)
        echo "Current Swift version: $SWIFT_VERSION"

        if [[ "$SWIFT_VERSION" == *"6.1"* ]]; then
          echo "‚úÖ Swift 6.1 is already available"
        else
          echo "‚ö†Ô∏è  Swift 6.1 not found, attempting to install via swiftly..."
          curl -L https://swiftlang.github.io/swiftly/swiftly-install.sh | bash
          export PATH="$HOME/.swiftly/bin:$PATH"
          swiftly install 6.1-release
          swiftly use 6.1-release
          echo "Swift 6.1 installed via swiftly"
        fi

    - name: Check Swift formatting
      run: |
        # Basic formatting check - ensure no obvious issues
        find Sources Tests -name "*.swift" -exec grep -l "import Foundation" {} \; | wc -l
        echo "‚úÖ Swift files found and accessible"

    - name: Check for TODO/FIXME comments
      run: |
        TODO_COUNT=$(find Sources Tests -name "*.swift" -exec grep -l "TODO\|FIXME" {} \; | wc -l)
        echo "üìù Found $TODO_COUNT files with TODO/FIXME comments"
        if [ $TODO_COUNT -gt 10 ]; then
          echo "‚ö†Ô∏è  Consider addressing some TODO/FIXME comments"
        fi

    - name: Check package structure
      run: |
        echo "üì¶ Package structure:"
        ls -la
        echo ""
        echo "üìÅ Sources structure:"
        find Sources -type f -name "*.swift" | head -10
        echo ""
        echo "üß™ Tests structure:"
        find Tests -type f -name "*.swift" | head -10
