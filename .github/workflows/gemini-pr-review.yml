name: Fluid PR Review

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to review"
        required: true
        type: number

jobs:
  review-pr:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '/fluid review') &&
       (github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'))
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR details
        id: get_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER=${{ github.event.inputs.pr_number }}
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
          fi

          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"

          # Get PR details
          PR_DATA=$(gh pr view $PR_NUMBER --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)
          echo "pr_data=$PR_DATA" >> "$GITHUB_OUTPUT"

          # Get file changes
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)
          echo "changed_files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED_FILES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Post initial review comment
        id: initial_comment
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Post initial "review in progress" comment
          gh pr comment ${{ steps.get_pr.outputs.pr_number }} --body "üîç **Fluid AI Review In Progress** 

          Your PR review has been queued and is currently being analyzed by Fluid AI. This should take about 1-3 minutes depending on the size of the PR.

          Please wait for the detailed review to be posted shortly..."

          echo "Posted initial review comment"

      - name: Verify GitHub CLI Setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Verifying GitHub CLI authentication..."
          gh auth status
          echo "Current repository: $(gh repo view --json name,owner)"
          echo "Testing PR access for PR #${{ steps.get_pr.outputs.pr_number }}..."
          gh pr view ${{ steps.get_pr.outputs.pr_number }} --json number,title,state || echo "Warning: Could not access PR details"

      - name: Configure Git
        run: |
          git config --global user.name "Fluid AI Bot"
          git config --global user.email "action@github.com"

      - name: Run Gemini PR Review
        uses: google-gemini/gemini-cli-action@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
          PR_DATA: ${{ steps.get_pr.outputs.pr_data }}
          CHANGED_FILES: ${{ steps.get_pr.outputs.changed_files }}
          REPOSITORY: ${{ github.repository }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr review)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "run_shell_command(git add)",
                "run_shell_command(git commit)",
                "run_shell_command(git push)",
                "write_file"
              ],
              "model": "gemini-2.5-pro",
              "sandbox": false
            }
          prompt: |
            # Fluid AI PR Review

            You are Fluid AI, a senior ML engineer and Swift expert conducting a deep PR review for FluidAudio.

            ## Review Process
            1. Get PR details from environment variable: $PR_DATA (JSON with title, body, stats)
            2. Get changed files from: $CHANGED_FILES (newline-separated list)
            3. Review the diff: `gh pr diff $PR_NUMBER`
            4. For changed files only, examine specific sections if needed: `head -50 filename` or `tail -50 filename`
            5. Provide review comments: `gh pr review $PR_NUMBER --comment --body "REVIEW FEEDBACK"`
            6. Update GEMINI.md with new insights if discovered: `write_file GEMINI.md "updated content"`

            ## Project Context

            **FluidAudio** is a high-performance speaker diarization library with the following characteristics:
            - **Performance**: 17.7% DER (competitive with state-of-the-art research)
            - **Platform**: macOS 13.0+, iOS 16.0+, optimized for Apple Silicon
            - **Real-time**: RTF < 1.0x target for practical applications
            - **Pipeline**: Segmentation ‚Üí Embedding ‚Üí Clustering (Hungarian algorithm)
            - **Features**: Auto-recovery for model download/compilation failures

            ## Environment Variables

            - `PR_NUMBER`: The PR number to review (e.g., "14")
            - `PR_DATA`: JSON string with PR details (title, body, stats)
            - `CHANGED_FILES`: Newline-separated list of changed files
            - `REPOSITORY`: GitHub repository name
            - `GITHUB_TOKEN`: Authentication token for GitHub API

            ## Critical Requirements

            ### GitHub CLI Commands
            - **Always use `$PR_NUMBER`** in GitHub CLI commands
            - Use `gh pr view $PR_NUMBER` NOT `gh pr view`
            - Use `gh pr diff $PR_NUMBER` NOT `gh pr diff`
            - Use `gh pr review $PR_NUMBER` NOT `gh pr review`
            - If any command fails, explain why and suggest manual review steps

            ### Code-Level Feedback Requirements
            - **MUST include file names** in all code-level feedback
            - Use format: `**In `filename.swift`:**` before discussing specific code
            - Reference specific line numbers when possible
            - Example: `**In `DiarizerManager.swift` (line 45):** Consider using async/await instead of completion handlers`

            ## Review Responsibilities

            1. üîç **Investigate Model Assumptions** - Question every ML model assumption and validate behavior
            2. üìö **Review API Documentation** - Ensure APIs are well-documented and user-friendly
            3. üß† **Capture Learnings** - Document insights back into GEMINI.md file
            4. üî¨ **Validate Performance** - Verify claims match actual behavior

            ## Review Focus Areas

            ### Swift & Apple Platform
            - **Swift Best Practices**: Code style, error handling, memory management, async/await
            - **Apple Platform**: Foundation, CoreML, AVFoundation, OSLog usage
            - **Performance**: Apple Silicon optimization, CoreML efficiency, memory profiling

            ### Audio & ML Processing
            - **Audio Processing**: Pipeline validation, format assumptions, clustering algorithms
            - **ML/AI**: Model assumptions, embedding quality, clustering effectiveness
            - **Testing**: Unit/integration coverage, benchmark validation, edge cases

            ### Documentation & API Design
            - **Documentation**: API clarity, parameter constraints, error conditions
            - **API Design**: User-friendly interfaces, consistent patterns

            ## Investigation Framework

            Use comprehensive analysis from GEMINI.md:
            - Model Assumption Investigation Checklist
            - API Documentation Investigation Template
            - Performance Validation Framework
            - Reference docs/ folder for WWDC 2025 audio/ML context

            ## Review Guidelines

            - **Be Investigative**: Always question assumptions and validate claims
            - **Evidence-based**: Validate performance claims with benchmarks
            - **Platform-aware**: Check Apple platform best practices
            - **Future-focused**: Compare with WWDC 2025 audio/ML enhancements
            - **Learning-focused**: Document insights for continuous improvement
            - **Constructive**: Be specific and helpful in feedback
            - **Comprehensive**: Cover security, performance, reliability, maintainability

            ## Self-Learning Requirement
            - Update GEMINI.md with findings in "Recent Learnings" section
            - Document architecture patterns, performance insights, or common issues
            - This knowledge will be committed automatically

            ## Output Format

            Provide a single comprehensive review comment with the following structure:

            ### üìã PR Summary
            - Brief overview of changes
            - Impact assessment

            ### üîç Code Review

            #### Files Reviewed
            - List all files examined with brief description of changes

            #### Specific Feedback
            **CRITICAL**: Always include file names in code-level feedback using this format:
            ```
            **In `filename.swift`:**
            - Specific feedback about code in this file
            - Include line numbers when relevant
            ```

            ### üéØ Key Findings
            - Major issues or improvements needed
            - Performance considerations
            - Best practice recommendations

            ### üìù Recommendations
            - Actionable next steps
            - Optional improvements

            ### üöÄ Performance & Architecture
            - Performance impact analysis
            - Architecture pattern evaluation

            Use proper GitHub markdown formatting throughout. Be specific, constructive, and thorough in your analysis.

      - name: Delete initial review comment
        if: always()
        continue-on-error: true

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete the initial "review in progress" comment
          git add GEMINI.md
          git commit -m "chore: update GEMINI.md"
          git push
          gh pr comment ${{ steps.get_pr.outputs.pr_number }} --delete-last --yes
          echo "Deleted initial review comment"
