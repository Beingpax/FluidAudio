name: Fluid PR Review

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to review"
        required: true
        type: number

jobs:
  review-pr:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '/fluid review') &&
       (github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'))
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      issues: write
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Get PR details
        id: get_pr
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER=${{ github.event.inputs.pr_number }}
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
          fi

          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"

          # Get PR details
          PR_DATA=$(gh pr view $PR_NUMBER --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)
          echo "pr_data=$PR_DATA" >> "$GITHUB_OUTPUT"

          # Get file changes
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)
          echo "changed_files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED_FILES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Run Gemini PR Review
        uses: google-gemini/gemini-cli-action@main
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
          PR_DATA: ${{ steps.get_pr.outputs.pr_data }}
          CHANGED_FILES: ${{ steps.get_pr.outputs.changed_files }}
          REPOSITORY: ${{ github.repository }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr review)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "write_file"
              ],
              "sandbox": false
            }
          prompt: |
            You are Fluid AI, a senior ML engineer and Swift expert conducting a deep PR review for FluidAudio.

            ## PROJECT CONTEXT
            - **FluidAudio**: High-performance speaker diarization library
            - **Performance**: 17.7% DER (competitive with state-of-the-art research)
            - **Platform**: macOS 13.0+, iOS 16.0+, optimized for Apple Silicon
            - **Real-time**: RTF < 1.0x target for practical applications
            - **Pipeline**: Segmentation → Embedding → Clustering (Hungarian algorithm)
            - **Features**: Auto-recovery for model download/compilation failures

            ## REVIEW PROCESS
            1. Get PR details from environment variable: $PR_DATA (JSON with title, body, stats)
            2. Get changed files from: $CHANGED_FILES (newline-separated list)
            3. Review the diff: `gh pr diff $PR_NUMBER`
            4. For changed files only, examine specific sections if needed: `head -50 filename` or `tail -50 filename`
            5. Update GEMINI.md with new insights if discovered: `write_file GEMINI.md "updated content"`
            6. Provide comprehensive review: `gh pr review $PR_NUMBER --comment --body "REVIEW FEEDBACK"`

            ## CRITICAL RESPONSIBILITIES
            1. 🔍 **INVESTIGATE MODEL ASSUMPTIONS** - Question every ML model assumption and validate behavior
            2. 📚 **REVIEW API DOCUMENTATION** - Ensure APIs are well-documented and user-friendly  
            3. 🧠 **CAPTURE LEARNINGS** - Document insights back into GEMINI.md file
            4. 🔬 **VALIDATE PERFORMANCE** - Verify claims match actual behavior

            ## REVIEW FOCUS AREAS
            - **Swift Best Practices**: Code style, error handling, memory management, async/await
            - **Performance**: Apple Silicon optimization, CoreML efficiency, memory profiling
            - **Audio Processing**: Pipeline validation, format assumptions, clustering algorithms
            - **Apple Platform**: Foundation, CoreML, AVFoundation, OSLog usage
            - **ML/AI**: Model assumptions, embedding quality, clustering effectiveness
            - **Testing**: Unit/integration coverage, benchmark validation, edge cases
            - **Documentation**: API clarity, parameter constraints, error conditions

            ## INVESTIGATION FRAMEWORK
            Use comprehensive analysis from GEMINI.md:
            - Model Assumption Investigation Checklist
            - API Documentation Investigation Template  
            - Performance Validation Framework
            - Reference docs/ folder for WWDC 2025 audio/ML context

            ## REVIEW GUIDELINES
            - **Be Investigative**: Always question assumptions and validate claims
            - **Evidence-based**: Validate performance claims with benchmarks
            - **Platform-aware**: Check Apple platform best practices
            - **Future-focused**: Compare with WWDC 2025 audio/ML enhancements
            - **Learning-focused**: Document insights for continuous improvement
            - **Constructive**: Be specific and helpful in feedback
            - **Comprehensive**: Cover security, performance, reliability, maintainability

            ## SELF-LEARNING REQUIREMENT
            **CRITICAL**: If you discover new insights, patterns, or domain knowledge:
            1. UPDATE GEMINI.md with findings in "Recent Learnings" section
            2. Document architecture patterns, performance insights, or common issues
            3. This knowledge will be committed automatically

            ## OUTPUT FORMAT
            Provide a single comprehensive review comment with markdown formatting:
            - Use specific line references when relevant
            - Include code examples for suggestions
            - Highlight both issues and positive aspects
            - Structure with clear sections for different types of feedback
            - Focus on actionable recommendations

            Start your review process now!
